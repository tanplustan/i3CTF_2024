from Crypto.Util.number import *
from math import isqrt

n = 676319397735730521344913515867934466557249938830320362713104028147907475161410924302106208557578129672312112570699649320756997751047748526179420294295804316927613590646362500359104020507658340529036035270899149526454273702813287402852634727810613194948491847765876245816016547885220263697428149258930813198492876598019676735410486670056615797543724287719091455698954641253484770813537258972909311238281517969150730995384333149529847238328429765795353460752934707376610811957523573435501837106757426420781881114642789205754128429360504244479444241632983844396437167782627922552410033039437848922197363252606322937787867911241387378967150111636631701717048322098116389046175321122703888084238623535173066977835322244341329267519091875372840072587867333286629354364209002277043427436048588195176125380421921033773615132189988677607703687967780491410895234239462032852142082773143240556598165777168487170389814557079261971425454423105866029747029998106492705062189106761305859216288748576399977208908650577042000800274711166004161556754908961331763589556753014794376259259606115207134310825830822116460560549122564950637637935822464989859830843182778152927632025786667060053277719602433343998292080693367021704276072816301015536576394869
e = 65537
c = 664770802525007143114183649006136242832189927741550935760962329902059309732424301521809980196106418689617174881496296906889739322993290803900033249826583457283609844484929381726747316624714583174890351244075333339547125880555403549213431833796315857950978666222904203526684608160797705967294646151160520688186449112505033358254659042379897274546986920393898244439373303684790753059269951764517696979362344086044350912649259909606498113413674465420396758678079400706745868788994998226134818620891496314452048048354405515992789975986725419340019457814278146884813636447752534847785470343293911779166688699123725539285227602765620731322529572500876737649110866509240876649446969788110024497872073014969073164415064343190985244151158687004958297206451893083572456008882747336332262466921890643307838269580821878509391427980862837213427596174435199467256322773476561967561206542311297261289353875552748106774769305181903774843257377630554451944976305667968109176630441405588245650470960860534257538527019336908763594170060247251558054736334322859485164458617968160442028365253577887320755712718826992505421532832826293807854478396182841201625377433621886141928179684217359181086658080520668306763937364261199973193813469721007859720592820


# nを素因数分解
def fermat(n):
    a = isqrt(n) + 1
    while True:
        b = a * a - n
        root = isqrt(b)
        if root * root == b:
            return a - root, a + root
        a += 1


p, q = fermat(n)
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
m = pow(c, d, n)
print(long_to_bytes(m).decode())
